package shapes;
import static org.lwjgl.opengl.GL11.GL_COLOR_BUFFER_BIT;
import static org.lwjgl.opengl.GL11.GL_DEPTH_BUFFER_BIT;
import static org.lwjgl.opengl.GL11.GL_DEPTH_TEST;
import static org.lwjgl.opengl.GL11.GL_DIFFUSE;
import static org.lwjgl.opengl.GL11.GL_FRONT;
import static org.lwjgl.opengl.GL11.GL_LINES;
import static org.lwjgl.opengl.GL11.GL_MODELVIEW;
import static org.lwjgl.opengl.GL11.GL_PROJECTION;
import static org.lwjgl.opengl.GL11.GL_QUADS;
import static org.lwjgl.opengl.GL11.GL_SHININESS;
import static org.lwjgl.opengl.GL11.GL_SPECULAR;
import static org.lwjgl.opengl.GL11.GL_POLYGON;
import static org.lwjgl.opengl.GL11.glBegin;
import static org.lwjgl.opengl.GL11.glClear;
import static org.lwjgl.opengl.GL11.glClearColor;
import static org.lwjgl.opengl.GL11.glColor3f;
import static org.lwjgl.opengl.GL11.glEnable;
import static org.lwjgl.opengl.GL11.glEnd;
import static org.lwjgl.opengl.GL11.glLineWidth;
import static org.lwjgl.opengl.GL11.glLoadMatrixf;
import static org.lwjgl.opengl.GL11.glMaterialf;
import static org.lwjgl.opengl.GL11.glMaterialfv;
import static org.lwjgl.opengl.GL11.glMatrixMode;
import static org.lwjgl.opengl.GL11.glVertex3f;
import static org.lwjgl.opengl.GL11.glViewport;
import static org.lwjgl.opengl.GL11.glRotatef;

import org.joml.Vector3f;

import static org.lwjgl.opengl.GL11.glTranslatef;
import static org.lwjgl.opengl.GL11.glPushMatrix;
import static org.lwjgl.opengl.GL11.glPopMatrix;
import static org.lwjgl.opengl.GL11.glScalef;

public class Chopper extends Shapes {
	private static final Cube MyCube = new Cube();
	private static final Blade MyBlade = new Blade();
	private static final Cylinder MyCylinder = new Cylinder();
	private static final Sphere MySphere = new Sphere();
	private float PropellerSpeed = 0;
	Vector3f Chop = new Vector3f( 0.0f, 0.0f, 0.0f );
	@Override
	public void render() {
		// TODO Auto-generated method stub
		glTranslatef(Chop.x, Chop.y + 1.5f, Chop.z);
		glPushMatrix();//Draw body
			//System.out.println("Something");
			glMaterialfv(GL_FRONT,GL_DIFFUSE,new float[]{0.20f, 0.75f, 0.0f, 1.0f});
			glMaterialfv(GL_FRONT,GL_SPECULAR,new float[]{0.5f, 0.5f, 0.5f, 1.0f});
			glMaterialf(GL_FRONT,GL_SHININESS,32);
			glScalef(1.5f, 1.5f, 1.5f);
			MyCube.render();
			
			glTranslatef(0.0f, 1.25f, 0.0f);
			
			glPushMatrix();//Draw middle axes
				glRotatef(-90.0f, 1.0f, 0.0f, 0.0f);
				glColor3f(0.01f, 0.15f, 0.03f);
				glScalef(0.5f, 0.5f, 0.25f);
				MyCylinder.render();
			glPopMatrix();
			
			glTranslatef(0.0f, 0.25f, 0.0f);
			glColor3f(0.5f, 0.5f, 1.0f);
			
			glPushMatrix();//軸頂	
				glScalef(0.25f,0.1f,0.25f);
				MySphere.render();	
			glPopMatrix();
			
			glTranslatef(0.0f, -0.05f, 0.0f);
			glRotatef(90.0f, 1.0f, 0.0f, 0.0f);/*讓扇葉水平旋轉*/
			
			glRotatef(PropellerSpeed, 0.0f, 0.0f, 1.0f);//draw blades
			glPushMatrix();//blade1
				glRotatef(-45.0f, 0.0f, 1.0f, 0.0f);
				glScalef(0.4f, 0.4f, 0.4f);
				MyBlade.render();
			glPopMatrix();
			
			glRotatef(90.0f, 0.0f, 0.0f, 1.0f);
			glPushMatrix();//blade2
				glRotatef(-45.0f, 0.0f, 1.0f, 0.0f);
				glScalef(0.4f, 0.4f, 0.4f);
				MyBlade.render();
			glPopMatrix();
			
			glRotatef(90.0f, 0.0f, 0.0f, 1.0f);
			glPushMatrix();//blade3
				glRotatef(-45.0f, 0.0f, 1.0f, 0.0f);
				glScalef(0.4f, 0.4f, 0.4f);
				MyBlade.render();
			glPopMatrix();
			
			glRotatef(90.0f, 0.0f, 0.0f, 1.0f);
			glPushMatrix();//blade4
				glRotatef(-45.0f, 0.0f, 1.0f, 0.0f);
				glScalef(0.4f, 0.4f, 0.4f);
				MyBlade.render();
			glPopMatrix();
			
		glPopMatrix();
		
		glTranslatef(-3f, 0.0f, 0.0f);
		glPushMatrix();//draw 機尾
			glScalef(2.0f, 0.5f, 0.5f);	/* Scale up the axes */
			glColor3f(0.15f, 0.40f, 0.40f);
			MyCube.render();                 /* Draw a unit cube in the new coord. sys. */
		glPopMatrix();
		
		
		glTranslatef(-1.5f, 0.0f, 0.65f);
		glPushMatrix();
			glScalef(0.3f, 0.3f, 0.35f);	
			glColor3f(0.93f, 0.03f, 0.18f);
			MyCylinder.render();  
		glPopMatrix();

		
		glPushMatrix();//軸頂
			glTranslatef(0.0f, 0.0f, -0.35f);
			glScalef(0.15f,0.15f,0.15f);
			MySphere.render();	
		glPopMatrix();
	
		glTranslatef(0.0f, 0.0f, -0.05f);
		
		glTranslatef(0, 0, 0.35f);
		glColor3f(0.5f, 0.5f, 1.0f);
		
		glRotatef(PropellerSpeed, 0.0f, 0.0f, 1.0f);
		glPushMatrix();
			glRotatef(-45.0f, 0.0f, 1.0f, 0.0f);
			glScalef(0.15f, 0.15f, 0.15f);
			MyBlade.render();
		glPopMatrix();
		
		glRotatef(90.0f, 0.0f, 0.0f, 1.0f);
		glPushMatrix();
			glRotatef(-45.0f, 0.0f, 1.0f, 0.0f);
			glScalef(0.15f, 0.15f, 0.15f);
			MyBlade.render();
		glPopMatrix();
		
		glRotatef(90.0f, 0.0f, 0.0f, 1.0f);
		glPushMatrix();
			glRotatef(-45.0f, 0.0f, 1.0f, 0.0f);
			glScalef(0.15f, 0.15f, 0.15f);
			MyBlade.render();
		glPopMatrix();
		
		glRotatef(90.0f, 0.0f, 0.0f, 1.0f);
		glPushMatrix();
			glRotatef(-45.0f, 0.0f, 1.0f, 0.0f);
			glScalef(0.15f, 0.15f, 0.15f);
			MyBlade.render();
		glPopMatrix();
	}
	
	public float getSpeed(){
		return this.PropellerSpeed;
	}
	public void setSpeed(float speed){
		this.PropellerSpeed = speed;
	}

}
